#!/bin/sh
env
make_resolv_conf() {
	if [ x"$new_domain_name_servers" != x ]; then
		cat /dev/null > /etc/resolv.conf.dhclient
		chmod 644 /etc/resolv.conf.dhclient

		if [ x"$new_domain_search" != x ]; then
			echo search $new_domain_search >> /etc/resolv.conf.dhclient
		elif [ x"$new_domain_name" != x ]; then
			# Note that the DHCP 'Domain Name Option' is really just a domain
			# name, and that this practice of using the domain name option as
			# a search path is both nonstandard and deprecated.
			echo search $new_domain_name >> /etc/resolv.conf.dhclient
		fi

		for nameserver in $new_domain_name_servers; do
			echo nameserver $nameserver >>/etc/resolv.conf.dhclient
		done

		mv /etc/resolv.conf.dhclient /etc/resolv.conf

	elif [ "x${new_dhcp6_name_servers}" != x ] ; then
		cat /dev/null > /etc/resolv.conf.dhclient6
		chmod 644 /etc/resolv.conf.dhclient6

		if [ "x${new_dhcp6_domain_search}" != x ] ; then
			echo search ${new_dhcp6_domain_search} >> /etc/resolv.conf.dhclient6
		fi
		for nameserver in ${new_dhcp6_name_servers} ; do
			echo nameserver ${nameserver} >> /etc/resolv.conf.dhclient6
		done

		mv /etc/resolv.conf.dhclient6 /etc/resolv.conf
	fi
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
exit_with_hooks() {
	exit_status=$1
	if [ -f /etc/dhclient-exit-hooks ]; then
		. /etc/dhclient-exit-hooks
	fi
	# probably should do something with exit status of the local script
	exit $exit_status
}

# Invoke the local dhcp client enter hooks, if they exist.
if [ -f /etc/dhclient-enter-hooks ]; then
	exit_status=0
	. /etc/dhclient-enter-hooks
	# allow the local script to abort processing of this state
	# local script must set exit_status variable to nonzero.
	if [ $exit_status -ne 0 ]; then
		exit $exit_status
	fi
fi

###
### DHCPv4 Handlers
###

if [ x$new_broadcast_address != x ]; then
	new_broadcast_arg="broadcast $new_broadcast_address"
fi

if [ x$new_subnet_mask != x ]; then
	new_subnet_arg="netmask $new_subnet_mask"
fi

if [ x$alias_subnet_mask != x ]; then
	alias_subnet_arg="netmask $alias_subnet_mask"
fi

if [ x$reason = xMEDIUM ]; then
	# Linux doesn't do mediums (ok, ok, media).
	exit_with_hooks 0
fi

if [ x$reason = xPREINIT ]; then
	if [ x$alias_ip_address != x ]; then
		# Bring down alias interface. Its routes will disappear too.
		ifconfig $interface:0- 0.0.0.0
	fi
	ifconfig $interface 0.0.0.0 up

	# We need to give the kernel some time to get the interface up.
	sleep 1

	exit_with_hooks 0
fi

if [ x$reason = xARPCHECK ] || [ x$reason = xARPSEND ]; then
	exit_with_hooks 0
fi
  
if [ x$reason = xBOUND ] || [ x$reason = xRENEW ] || \
   [ x$reason = xREBIND ] || [ x$reason = xREBOOT ]; then
	current_hostname=`hostname`
	if [ x$current_hostname = x ] || \
	[ x$current_hostname = x$old_host_name ]; then
		if [ x$current_hostname = x ] || \
		[ x$new_host_name != x$old_host_name ]; then
			hostname $new_host_name
		fi
	fi

	if [ x$old_ip_address != x ] && [ x$alias_ip_address != x ] && \
	[ x$alias_ip_address != x$old_ip_address ]; then
		# Possible new alias. Remove old alias.
		ifconfig $interface:0- 0.0.0.0
	fi
	if [ x$old_ip_address != x ] && [ x$old_ip_address != x$new_ip_address ]; then
		# IP address changed. Bringing down the interface will delete all routes,
		# and clear the ARP cache.
		ifconfig $interface 0.0.0.0 down
	fi

	if [ x$old_ip_address = x ] || [ x$old_ip_address != x$new_ip_address ] || \
	[ x$reason = xBOUND ] || [ x$reason = xREBOOT ]; then

		ifconfig $interface $new_ip_address $new_subnet_arg \
		$new_broadcast_arg
		for router in $new_routers; do
			if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
				route add -host $router dev $interface
			fi
			route add default gw $router
		done
	fi
	if [ x$new_ip_address != x$alias_ip_address ] && [ x$alias_ip_address != x ];
	then
		ifconfig $interface:0- 0.0.0.0
		ifconfig $interface:0 $alias_ip_address $alias_subnet_arg
		route add -host $alias_ip_address $interface:0
	fi
	make_resolv_conf
	exit_with_hooks 0
fi

if [ x$reason = xEXPIRE ] || [ x$reason = xFAIL ] || [ x$reason = xRELEASE ] \
   || [ x$reason = xSTOP ]; then
	if [ x$alias_ip_address != x ]; then
		# Turn off alias interface.
		ifconfig $interface:0- 0.0.0.0
	fi
	if [ x$old_ip_address != x ]; then
		# Shut down interface, which will delete routes and clear arp cache.
		ifconfig $interface 0.0.0.0 down
	fi
	if [ x$alias_ip_address != x ]; then
		ifconfig $interface:0 $alias_ip_address $alias_subnet_arg
		route add -host $alias_ip_address $interface:0
	fi
	exit_with_hooks 0
fi

if [ x$reason = xTIMEOUT ]; then
	if [ x$alias_ip_address != x ]; then
		ifconfig $interface:0- 0.0.0.0
	fi
	ifconfig $interface $new_ip_address $new_subnet_arg \
					$new_broadcast_arg
	set $new_routers
	if ping -q -c 1 $1; then
		if [ x$new_ip_address != x$alias_ip_address ] && \
				[ x$alias_ip_address != x ]; then
			ifconfig $interface:0 $alias_ip_address $alias_subnet_arg
			route add -host $alias_ip_address dev $interface:0
		fi
		for router in $new_routers; do
			if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
				route add -host $router dev $interface
			fi
			route add default gw $router
		done
		make_resolv_conf
		exit_with_hooks 0
	fi
	ifconfig $interface 0.0.0.0 down
	exit_with_hooks 1
fi

###
### DHCPv6 Handlers
###

if [ x$reason = xPREINIT6 ]; then
	# Ensure interface is up.
	ifconfig ${interface} up

	# Remove any stale addresses from aborted clients.
	ip -f inet6 addr flush dev ${interface} scope global

	exit_with_hooks 0
fi

#if [ x${old_ip6_prefix} != x ] || [ x${new_ip6_prefix} != x ] ; then
#    echo Prefix ${reason} old=${old_ip6_prefix} new=${new_ip6_prefix}

   #####################################################################
  echo "Copy IPv6 DNS server, default gateway, etc. to global environment variables in tmp folder"
# test of program operation starts
   
 # for Radvd
  echo ${new_ip6_prefix} > /tmp/ip6_prefix
  echo ${new_dhcp6_name_servers} > /tmp/dhcp6_name_servers

  # for tunnel
  echo ${new_dhcp6_softwire} > /tmp/dhcp6_softwire

  # for defroute
  echo ${new_dhcp6_defgateway} > /tmp/dhcp6_defgateway
#--------------------------------------------------------------------------------------------------
	
	option="option 'remoteendpointipv6addr'"
	replace="$option '${new_dhcp6_softwire}'"
	option="$option.*"
	sed "s/$option.*/$replace/g" /tmp/tunnel.conf > /tmp/softwire.temp
	cp /tmp/softwire.temp /tmp/tunnel.conf

       option="option 'ip6_prefix'"
       new_ip6=$(echo ${new_ip6_prefix}|sed 's/\//\\\//g')
       replace12="option 'ip6_prefix' '${new_ip6}'"
       sed "s/$option.*/$replace12/g" /tmp/tunnel.conf > /tmp/softwire.temp
       cp /tmp/softwire.temp /tmp/tunnel.conf


       option="option 'dhcp6_name_servers'"
       new_ip6=$(echo ${new_dhcp6_name_servers}|sed 's/\//\\\//g')
       replace12="option 'dhcp6_name_servers' '${new_ip6}'"
       sed "s/$option.*/$replace12/g" /tmp/tunnel.conf > /tmp/softwire.temp
       cp /tmp/softwire.temp /tmp/tunnel.conf
       
       option="option 'ip6gateway'"
       new_ip6=$(echo ${new_dhcp6_defgateway}|sed 's/\//\\\//g')
       replace12="option 'ip6gateway' '${new_ip6}'"
       sed "s/$option.*/$replace12/g" /tmp/tunnel.conf > /tmp/softwire.temp
       cp /tmp/softwire.temp /tmp/tunnel.conf
       
       # now check if overridden values exist anywhere
	/sbin/./checkipoverride.sh

       #TODO  check if both min values exist for creating tunnel
       
       # now create tunnel
       tmp_remoteip6=$(cat /tmp/tunnel.conf  | grep "option 'remoteendpointipv6addr'" | sed s/"option 'remoteendpointipv6addr'"//g | sed s/\'//g)
       tmp_localip6=$(cat /tmp/tunnel.conf  | grep "option 'localtunnelendpointipv6addr'" | sed s/"option 'localtunnelendpointipv6addr'"//g | sed s/\'//g)
       tmp_remoteip4=$(cat /tmp/tunnel.conf  | grep "option 'localipv4addr' " | sed s/"option 'localipv4addr'"//g | sed s/\'//g)
       tmp_ip6gateway=$(cat /tmp/tunnel.conf  | grep "option 'ip6gateway'" | sed s/"option 'ip6gateway'"//g | sed s/\'//g)
       echo dhcp6_name_servers $p

DsliteAuto=$(cat /etc/config/mantun | grep "option 'DsliteAuto'" | sed s/"option 'DsliteAuto'"//g | sed s/\'//g)
DsliteValueAuto=$(cat /etc/config/mantun | grep "option 'DsliteValueAuto'" | sed s/"option 'DsliteValueAuto'"//g | sed s/\'//g)

echo "remoteip6  says.." $tmp_remoteip6

if [ ${DsliteAuto} -eq 1 ]; then # testing if DS-Lite tunnel is set as auto build on bootup or not
	if [ ${DsliteValueAuto} -eq 0 ]; then
		if [ ${tmp_remoteip6} ]; then
			if [ $(ifconfig | grep "dslite" | wc -l) -gt 0 ]; then
				ip -6 tunnel del dslite
                        #creating tunnel with dhcp parameters
                        createtunnel.sh  $tmp_localip6 $tmp_remoteip6 
                        #radvd section starts     
                        tmp_ip6prefix=$(cat /tmp/tunnel.conf  | grep "option 'ip6_prefix'" | sed s/"option 'ip6_prefix'"//g | sed s/\'//g)
                        tmp_ip6DNS=$(cat /tmp/tunnel.conf  | grep "option 'dhcp6_name_servers'" | sed s/"option 'dhcp6_name_servers'"//g | sed s/\'//g)
                        /sbin/./radvd.sh  ${tmp_ip6prefix%/*}/64  $tmp_ip6DNS
                        # section to add ::1 towards lan end
                        /sbin/./lanendpoint.sh
                        # default route 
                        ip -6 route del default                        
			ip -6 route add default via $tmp_ip6gateway
                        echo "nameserver " $tmp_ip6DNS > /etc/resolv.conf
                  
                        #restart dnsmasq
                        touch /tmp/dnsmasq.leases
                        killall dnsmasq
                        dnsmasq -b -i br-lan
                                                                                             

                        else
                        #creating tunnel with dhcp parameters
                        createtunnel.sh  $tmp_localip6 $tmp_remoteip6 
                        #radvd section starts     
                        tmp_ip6prefix=$(cat /tmp/tunnel.conf  | grep "option 'ip6_prefix'" | sed s/"option 'ip6_prefix'"//g | sed s/\'//g)
                        tmp_ip6DNS=$(cat /tmp/tunnel.conf  | grep "option 'dhcp6_name_servers'" | sed s/"option 'dhcp6_name_servers'"//g | sed s/\'//g)
                        /sbin/./radvd.sh  ${tmp_ip6prefix%/*}/64  $tmp_ip6DNS
                        # section to add ::1 towards lan end
                        /sbin/./lanendpoint.sh
                         # default route
                        ip -6 route del default
                        ip -6 route add default via $tmp_ip6gateway
                        echo "nameserver " $tmp_ip6DNS > /etc/resolv.conf


                        #restart dnsmasq 
                        touch /tmp/dnsmasq.leases
                        killall dnsmasq
                        dnsmasq -b -i br-lan


                     fi
		else
			echo "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& Softwire not found &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"
		fi
	fi
fi

 #------------------------------------------------------------------------------------------------
 ######################################################################
#    exit_with_hooks 0
#fi

if [ x$reason = xBOUND6 ]; then
  if [ x${new_ip6_address} = x ] || [ x${new_ip6_prefixlen} = x ] ; then
    exit_with_hooks 2;
  fi

  ifconfig ${interface} ${new_ip6_address}/${new_ip6_prefixlen} 
  echo "****************************"
  ip -6 route del default
  ip -6 route add default via $tmp_ip6gateway

 
  rm /tmp/ip6_address
 
  echo $new_ip6_address > /tmp/ip6_address	

#------------------------------------------------------------------------------------------------------------------   
       # copy the file first before even startng   .. this i the first value thatc omes in.
        cp /etc/config/tunnel.conf  /tmp/tunnel.conf
	option="option 'localtunnelendpointipv6addr'"
	replace="$option '${new_ip6_address}'"
	option="$option.*"
	sed "s/$option.*/$replace/g" /tmp/tunnel.conf > /tmp/softwire.temp
	cp /tmp/softwire.temp /tmp/tunnel.conf
#------------------------------------------------------------------------------------------------------------------
  # Check for nameserver options.
  make_resolv_conf

  exit_with_hooks 0
fi


if [ x$reason = xRENEW6 ] || [ x$reason = xREBIND6 ]; then
  # Make sure nothing has moved around on us.

  # Nameservers/domains/etc.
  if [ "x${new_dhcp6_name_servers}" != "x${old_dhcp6_name_servers}" ] ||
     [ "x${new_dhcp6_domain_search}" != "x${old_dhcp6_domain_search}" ] ; then
    make_resolv_conf
  fi

  exit_with_hooks 0
fi

if [ x$reason = xDEPREF6 ]; then
  if [ x${new_ip6_address} = x ] ; then
    exit_with_hooks 2;
  fi

  ifconfig ${interface} inet6 ${new_ip6_address} deprecated

  exit_with_hooks 0 
fi

if [ x$reason = xEXPIRE6 -o x$reason = xRELEASE6 -o x$reason = xSTOP6 ]; then
  if [ x${old_ip6_address} = x ] || [ x${old_ip6_prefixlen} = x ] ; then
    exit_with_hooks 2;
  fi

  ifconfig ${interface} inet6 ${old_ip6_address}/${old_ip6_prefixlen} -alias

  exit_with_hooks 0
fi

exit_with_hooks 0
