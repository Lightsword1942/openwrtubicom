#!/bin/sh
env
. /sbin/updateresolvconf

make_resolv_conf() {
	if [ x"$new_domain_name_servers" != x ]; then
		cat /dev/null > /etc/resolv.conf.dhclient
		chmod 644 /etc/resolv.conf.dhclient
	
		if [ x"$new_domain_search" != x ]; then
			echo search $new_domain_search >> /etc/resolv.conf.dhclient
		elif [ x"$new_domain_name" != x ]; then
			# Note that the DHCP 'Domain Name Option' is really just a domain
			# name, and that this practice of using the domain name option as
			# a search path is both nonstandard and deprecated.
			echo search $new_domain_name >> /etc/resolv.conf.dhclient
		fi

		for nameserver in $new_domain_name_servers; do
			echo nameserver $nameserver >>/etc/resolv.conf.dhclient
		done

		mv /etc/resolv.conf.dhclient /etc/resolv.conf

	elif [ "x${new_dhcp6_name_servers}" != x ] ; then
		cat /dev/null > /etc/resolv.conf.dhclient6
		chmod 644 /etc/resolv.conf.dhclient6

		if [ "x${new_dhcp6_domain_search}" != x ] ; then
			echo search ${new_dhcp6_domain_search} >> /etc/resolv.conf.dhclient6
		fi
		for nameserver in ${new_dhcp6_name_servers} ; do
			echo nameserver ${nameserver} >> /etc/resolv.conf.dhclient6
		done

		mv /etc/resolv.conf.dhclient6 /etc/resolv.conf
	fi
	#if both v4 and v6 clients are running, concatenate results
	cat /tmp/resolv.conf.dhclient* >> /tmp/resolv.conf.auto
	update_dns
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
exit_with_hooks() {
	exit_status=$1
	if [ -f /etc/dhclient-exit-hooks ]; then
		. /etc/dhclient-exit-hooks
	fi
	# probably should do something with exit status of the local script
	exit $exit_status
}

# Invoke the local dhcp client enter hooks, if they exist.
if [ -f /etc/dhclient-enter-hooks ]; then
	exit_status=0
	. /etc/dhclient-enter-hooks
	# allow the local script to abort processing of this state
	# local script must set exit_status variable to nonzero.
	if [ $exit_status -ne 0 ]; then
		exit $exit_status
	fi
fi

###
### DHCPv4 Handlers
###

if [ x$new_broadcast_address != x ]; then
	new_broadcast_arg="broadcast $new_broadcast_address"
fi

if [ x$new_subnet_mask != x ]; then
	new_subnet_arg="netmask $new_subnet_mask"
fi

if [ x$alias_subnet_mask != x ]; then
	alias_subnet_arg="netmask $alias_subnet_mask"
fi

if [ x$reason = xMEDIUM ]; then
	# Linux doesn't do mediums (ok, ok, media).
	exit_with_hooks 0
fi

if [ x$reason = xPREINIT ]; then
	if [ x$alias_ip_address != x ]; then
		# Bring down alias interface. Its routes will disappear too.
		ifconfig $interface:0- 0.0.0.0
	fi
	ifconfig $interface 0.0.0.0 up

	# We need to give the kernel some time to get the interface up.
	sleep 1

	exit_with_hooks 0
fi

if [ x$reason = xARPCHECK ] || [ x$reason = xARPSEND ]; then
	exit_with_hooks 0
fi
  
if [ x$reason = xBOUND ] || [ x$reason = xRENEW ] || \
   [ x$reason = xREBIND ] || [ x$reason = xREBOOT ]; then
	current_hostname=`hostname`
	if [ x$current_hostname = x ] || \
	[ x$current_hostname = x$old_host_name ]; then
		if [ x$current_hostname = x ] || \
		[ x$new_host_name != x$old_host_name ]; then
			hostname $new_host_name
		fi
	fi

	if [ x$old_ip_address != x ] && [ x$alias_ip_address != x ] && \
	[ x$alias_ip_address != x$old_ip_address ]; then
		# Possible new alias. Remove old alias.
		ifconfig $interface:0- 0.0.0.0
	fi
	if [ x$old_ip_address != x ] && [ x$old_ip_address != x$new_ip_address ]; then
		# IP address changed. Bringing down the interface will delete all routes,
		# and clear the ARP cache.
		ifconfig $interface 0.0.0.0 down
	fi

	if [ x$old_ip_address = x ] || [ x$old_ip_address != x$new_ip_address ] || \
	[ x$reason = xBOUND ] || [ x$reason = xREBOOT ]; then

		ifconfig $interface $new_ip_address $new_subnet_arg \
				$new_broadcast_arg
			for router in $new_routers; do
			if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
				route add -host $router dev $interface
			fi
			route add default gw $router
		done
	fi
	if [ x$new_ip_address != x$alias_ip_address ] && [ x$alias_ip_address != x ];
	then
		ifconfig $interface:0- 0.0.0.0
		ifconfig $interface:0 $alias_ip_address $alias_subnet_arg
		route add -host $alias_ip_address $interface:0
	fi
	make_resolv_conf
	exit_with_hooks 0
fi

if [ x$reason = xEXPIRE ] || [ x$reason = xFAIL ] || [ x$reason = xRELEASE ] \
   || [ x$reason = xSTOP ]; then
	if [ x$alias_ip_address != x ]; then
		# Turn off alias interface.
		ifconfig $interface:0- 0.0.0.0
	fi
	if [ x$old_ip_address != x ]; then
		# Shut down interface, which will delete routes and clear arp cache.
		ifconfig $interface 0.0.0.0 down
	fi
	if [ x$alias_ip_address != x ]; then
		ifconfig $interface:0 $alias_ip_address $alias_subnet_arg
		route add -host $alias_ip_address $interface:0
	fi
	exit_with_hooks 0
fi

if [ x$reason = xTIMEOUT ]; then
	if [ x$alias_ip_address != x ]; then
		ifconfig $interface:0- 0.0.0.0
	fi
	ifconfig $interface $new_ip_address $new_subnet_arg \
					$new_broadcast_arg
	set $new_routers
	if ping -q -c 1 $1; then
		if [ x$new_ip_address != x$alias_ip_address ] && \
				[ x$alias_ip_address != x ]; then
			ifconfig $interface:0 $alias_ip_address $alias_subnet_arg
			route add -host $alias_ip_address dev $interface:0
		fi
		for router in $new_routers; do
			if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
				route add -host $router dev $interface
			fi
			route add default gw $router
		done
		make_resolv_conf
		exit_with_hooks 0
	fi
	ifconfig $interface 0.0.0.0 down
	exit_with_hooks 1
fi

###
### DHCPv6 Handlers
###

if [ x$reason = xPREINIT6 ]; then
	# Ensure interface is up.
	ifconfig ${interface} up

	# Remove any stale addresses from aborted clients.
	ip -f inet6 addr flush dev ${interface} scope global

	exit_with_hooks 0
fi

#if [ x${old_ip6_prefix} != x ] || [ x${new_ip6_prefix} != x ] ; then
#    echo Prefix ${reason} old=${old_ip6_prefix} new=${new_ip6_prefix}

#####################################################################
	echo "Copy IPv6 DNS server, default gateway, etc. to global environment variables in tmp folder"
	# test of program operation starts

	# for Radvd
	echo ${new_ip6_prefix} > /tmp/ip6_prefix
	echo ${new_dhcp6_name_servers} > /tmp/dhcp6_name_servers

	# for tunnel
	echo ${new_dhcp6_softwire} > /tmp/dhcp6_softwire

	# for defroute
	echo ${new_dhcp6_defgateway} > /tmp/dhcp6_defgateway

	echo ${new_ip6_prefixlen} > /tmp/ip6_prefixlen
#--------------------------------------------------------------------------------------------------
	
	uci -c /tmp/ set tunnel.overridetunnel.remoteendpointipv6addr="${new_dhcp6_softwire}"

	#new_ip6=$(echo ${new_ip6_prefix})
	uci -c /tmp/ set tunnel.overridetunnel.ip6_prefix="${new_ip6_prefix}"

	#new_ip6=$(echo ${new_dhcp6_name_servers})
	uci -c /tmp/ set tunnel.overridetunnel.dhcp6_name_servers="${new_dhcp6_name_servers}"

	#new_ip6=$(echo ${new_dhcp6_defgateway})
	uci -c /tmp/ set tunnel.overridetunnel.ip6gateway="${new_dhcp6_defgateway}"

#	uci -c /tmp/ set tunnel.overridetunnel.Localip6addr="${new_ip6_address}"
#	echo "+++++++++++++++++++++++ ${new_ip6_address} +++++++++++++++++++++++"

	uci -c /tmp/ commit tunnel
	# now check if overridden values exist anywhere
	/sbin/checkipoverride.sh >> /tmp/tmp.log
	cat /tmp/tunnel >> /tmp/tmp.log
	#TODO  check if both min values exist for creating tunnel

	# now create tunnel
	tmp_remoteip6=$(uci -c /tmp/ get tunnel.overridetunnel.remoteendpointipv6addr)
	tmp_localip6=$(uci -c /tmp/ get tunnel.overridetunnel.Localip6addr)
	tmp_ip6gateway=$(uci -c /tmp/ get tunnel.overridetunnel.ip6gateway)

	echo dhcp6_name_servers $p

	TunnelType=$(uci get mantun.general.TunnelType)
	TunnelMode=$(uci get mantun.general.TunnelMode)

	echo "remoteip6  says.." $tmp_remoteip6
	if [ ${new_dhcp6_name_servers} == ${old_dhcp6_name_servers} ] && [ ${new_ip6_prefix} == ${old_ip6_prefix} ] && [ ${new_dhcp6_softwire} == ${old_dhcp6_softwire} ] && [ ${new_dhcp6_defgateway} == ${old_dhcp6_defgateway} ] && [ ${new_ip6_prefixlen} == ${old_ip6_prefixlen} ]; then
		echo "No need to recreate tunnel"
	else
		#Recreate tunnel as DHCP vlaues changed.
		if [ ${TunnelType} -eq 0 ]; then # testing if DS-Lite tunnel is set as auto build on bootup or not
			if [ ${TunnelMode} -eq 1 ]; then
				if [ ${tmp_remoteip6} ]; then
				        #creating tunnel with dhcp parameters
				        /sbin/createdslitetunnelcalc.sh
				else
					echo "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& Softwire not found &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"
				fi
			fi
		fi
	fi
 #------------------------------------------------------------------------------------------------
 ######################################################################
#    exit_with_hooks 0
#fi

if [ x$reason = xBOUND6 ]; then
	if [ x${new_ip6_address} = x ] || [ x${new_ip6_prefixlen} = x ] ; then
		exit_with_hooks 2;
	fi

	ifconfig ${interface} ${new_ip6_address}/${new_ip6_prefixlen} 
	echo "****************************"
	ip -6 route del default
	ip -6 route add default via $tmp_ip6gateway


	rm /tmp/ip6_address

	echo "${new_ip6_address}/${new_ip6_prefixlen}" > /tmp/ip6_address	

	#------------------------------------------------------------------------------------------------------------------   
	# copy the file first before even startng   .. this i the first value thatc omes in.
	cp /etc/config/mantun  /tmp/tunnel
	uci -c /tmp/ set tunnel.overridetunnel.Localip6addr="${new_ip6_address}/${new_ip6_prefixlen}"
	uci -c /tmp/ commit tunnel

	#------------------------------------------------------------------------------------------------------------------
	# Check for nameserver options.
	make_resolv_conf

	exit_with_hooks 0
fi


if [ x$reason = xRENEW6 ] || [ x$reason = xREBIND6 ]; then
	# Make sure nothing has moved around on us.

	# Nameservers/domains/etc.
	if [ "x${new_dhcp6_name_servers}" != "x${old_dhcp6_name_servers}" ] ||
	[ "x${new_dhcp6_domain_search}" != "x${old_dhcp6_domain_search}" ] ; then
		make_resolv_conf
	fi

	exit_with_hooks 0
fi

if [ x$reason = xDEPREF6 ]; then
	if [ x${new_ip6_address} = x ] ; then
		exit_with_hooks 2;
	fi

	ifconfig ${interface} inet6 ${new_ip6_address} deprecated

	exit_with_hooks 0 
fi

if [ x$reason = xEXPIRE6 -o x$reason = xRELEASE6 -o x$reason = xSTOP6 ]; then
	if [ x${old_ip6_address} = x ] || [ x${old_ip6_prefixlen} = x ] ; then
		exit_with_hooks 2;
	fi

	ifconfig ${interface} inet6 ${old_ip6_address}/${old_ip6_prefixlen} -alias

	exit_with_hooks 0
fi

exit_with_hooks 0
