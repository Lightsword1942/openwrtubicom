#!/bin/sh
env
make_resolv_conf() {
  if [ x"$new_domain_name_servers" != x ]; then
    cat /dev/null > /tmp/resolv.conf.dhclient
    chmod 644 /tmp/resolv.conf.dhclient
    if [ x"$new_domain_search" != x ]; then
      echo search $new_domain_search >> /tmp/resolv.conf.dhclient
    elif [ x"$new_domain_name" != x ]; then
      # Note that the DHCP 'Domain Name Option' is really just a domain
      # name, and that this practice of using the domain name option as
      # a search path is both nonstandard and deprecated.
      echo search $new_domain_name >> /tmp/resolv.conf.dhclient
    fi
    for nameserver in $new_domain_name_servers; do
      echo nameserver $nameserver >>/tmp/resolv.conf.dhclient
    done

    #cat /tmp/resolv.conf.dhclient > /tmp/resolv.conf.auto
  elif [ "x${new_dhcp6_name_servers}" != x ] ; then
    cat /dev/null > /tmp/resolv.conf.dhclient6
    chmod 644 /tmp/resolv.conf.dhclient6

    if [ "x${new_dhcp6_domain_search}" != x ] ; then
      echo search ${new_dhcp6_domain_search} >> /tmp/resolv.conf.dhclient6
    fi
    for nameserver in ${new_dhcp6_name_servers} ; do
      echo nameserver ${nameserver} >> /tmp/resolv.conf.dhclient6
    done

    #cat /tmp/resolv.conf.dhclient6 > /tmp/resolv.conf.auto
  fi
   cat /tmp/resolv.conf.dhclient* > /tmp/resolv.conf.auto
   update_dns
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
exit_with_hooks() {
  exit_status=$1
  if [ -f /etc/dhclient-exit-hooks ]; then
    . /etc/dhclient-exit-hooks
  fi
# probably should do something with exit status of the local script
  exit $exit_status
}

# Invoke the local dhcp client enter hooks, if they exist.
if [ -f /etc/dhclient-enter-hooks ]; then
  exit_status=0
  . /etc/dhclient-enter-hooks
  # allow the local script to abort processing of this state
  # local script must set exit_status variable to nonzero.
  if [ $exit_status -ne 0 ]; then
    exit $exit_status
  fi
fi

###
### DHCPv4 Handlers
###

if [ x$new_broadcast_address != x ]; then
  new_broadcast_arg="broadcast $new_broadcast_address"
fi
if [ x$new_subnet_mask != x ]; then
  new_subnet_arg="netmask $new_subnet_mask"
fi
if [ x$alias_subnet_mask != x ]; then
  alias_subnet_arg="netmask $alias_subnet_mask"
fi

if [ x$reason = xMEDIUM ]; then
  # Linux doesn't do mediums (ok, ok, media).
  exit_with_hooks 0
fi

if [ x$reason = xPREINIT ]; then
  if [ x$alias_ip_address != x ]; then
    # Bring down alias interface. Its routes will disappear too.
    ifconfig $interface:0- 0.0.0.0
  fi
  ifconfig $interface 0.0.0.0 up

  # We need to give the kernel some time to get the interface up.
  sleep 1

  exit_with_hooks 0
fi

if [ x$reason = xARPCHECK ] || [ x$reason = xARPSEND ]; then
  exit_with_hooks 0
fi
  
if [ x$reason = xBOUND ] || [ x$reason = xRENEW ] || \
   [ x$reason = xREBIND ] || [ x$reason = xREBOOT ]; then
  current_hostname=`hostname`
  if [ x$current_hostname = x ] || \
     [ x$current_hostname = x$old_host_name ]; then
    if [ x$current_hostname = x ] || \
       [ x$new_host_name != x$old_host_name ]; then
      hostname $new_host_name
    fi
  fi
    
  if [ x$old_ip_address != x ] && [ x$alias_ip_address != x ] && \
		[ x$alias_ip_address != x$old_ip_address ]; then
    # Possible new alias. Remove old alias.
    ifconfig $interface:0- 0.0.0.0
  fi
  if [ x$old_ip_address != x ] && [ x$old_ip_address != x$new_ip_address ]; then
    # IP address changed. Bringing down the interface will delete all routes,
    # and clear the ARP cache.
    ifconfig $interface 0.0.0.0 down

  fi


  
#Section to start 6rd tunnel starts
  #prepare the config file template in temp directory
  cp /etc/config/mantun /tmp/tunnel
#  dhclient  -d  -cf /etc/dhclient4.conf  -sf /sbin/dhclient4-script  br-lan
  echo "6rd Dynamic Tunnel creation starts" 
  echo "This is 6rdinfo extracting" ${new_6rdinfo}
  new_6rdprefix=$(/sbin/dhcpcalc  " ${new_6rdinfo} " 1)
  new_6rdbr=$(/sbin/dhcpcalc  " ${new_6rdinfo} " 2)
  new_6rdipv4masklength=$(/sbin/dhcpcalc " ${new_6rdinfo} " 3)
  echo ${new_6rdipv4masklength}  new_6rdipv4masklength           
  echo ${new_6rdbr} new_6rdbr                                    
  echo ${new_6rdprefix} new_6rdprefix  
  if [ -f /tmp/new_6rdbr ]; then
	old_6rdbr=$(cat /tmp/new_6rdbr)
  fi  
  if [ -f /tmp/new_6rdipv4masklength ]; then
	old_6rdipv4masklength=$(cat /tmp/new_6rdipv4masklength)
  fi
  if [ -f /tmp/new_6rdprefix ]; then
	old_6rdprefix=$(cat /tmp/new_6rdprefix)
  fi
	

  echo ${new_ip_address} > /tmp/new_ip_address
  echo ${new_subnet_mask} > /tmp/new_subnet_mask
  echo ${new_6rdipv4masklength} > /tmp/new_6rdipv4masklength
  echo ${new_6rdbr} > /tmp/new_6rdbr
  echo ${new_6rdprefix} > /tmp/new_6rdprefix
  
  echo ${new_ip_address}  new_ip_address
# ---- writing to config file section -----


	uci -c /tmp/ set tunnel.static.WANip4addr="${new_ip_address}"


	newer_ip6=$(echo ${new_6rdbr}|sed 's/\//\\\//g')
	uci -c /tmp/ set tunnel.static.i6RDBr="${newer_ip6}"
	#$(/sbin/i6rdcalc2 i4 ${new_subnet_mask})
	#echo ${new_subnet_mask} tmp/new_subnet_mask

	newer_ip6=$(echo ${new_6rdipv4masklength}|sed 's/\//\\\//g')
	uci -c /tmp/ set tunnel.static.IPv4MaskLength="${newer_ip6}"


	#split the mask and address part.
	i6RDPrefix=${new_6rdprefix%::/*}  # everything before the slash
	i6RDPrefixLength=${new_6rdprefix#*/}  # everything after the slash

	newer_ip6=$(echo ${i6RDPrefix}|sed 's/\//\\\//g')
	uci -c /tmp/ set tunnel.static.i6RDPrefix="${newer_ip6}"

	newer_ip6=$(echo ${i6RDPrefixLength}|sed 's/\//\\\//g')
	uci -c /tmp/ set tunnel.static.i6RDPrefixLength="${newer_ip6}"
	uci -c /tmp/ commit tunnel
  
#-------------------------------------------------------------
#   now run check override
#   then create the DHCP tunnel if at all tunnel is enabled.
#   now create tunnel 
    #/sbin/checkipoverride.sh

	if [ ${new_6rdbr} == ${old_6rdbr} ] && [ ${new_6rdipv4masklength} == ${old_6rdipv4masklength} ] && [ ${new_6rdprefix} == ${old_6rdprefix} ] && [ ${new_ip_address} == ${old_ip_address} ] && [ ${new_subnet_mask} == ${old_subnet_mask} ]; then
		echo "No need to recreate tunnel"
	else
		TunnelMode=$(uci get mantun.general.TunnelMode)
		TunnelType=$(uci get mantun.general.TunnelType)
		if [ $TunnelType -eq 2 ]; then
			if [ $TunnelMode -eq 1 ]; then
				/sbin/create6rdtunnelcalc.sh	
			fi
		fi	
	fi


  if [ x$old_ip_address = x ] || [ x$old_ip_address != x$new_ip_address ] || \
     [ x$reason = xBOUND ] || [ x$reason = xREBOOT ]; then

    ifconfig $interface $new_ip_address $new_subnet_arg \
							$new_broadcast_arg
    for router in $new_routers; do
      if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
	route add -host $router dev $interface
      fi
      route add default gw $router
    done
  fi
  if [ x$new_ip_address != x$alias_ip_address ] && [ x$alias_ip_address != x ];
   then
    ifconfig $interface:0- 0.0.0.0
    ifconfig $interface:0 $alias_ip_address $alias_subnet_arg
    route add -host $alias_ip_address $interface:0
  fi
  make_resolv_conf
  exit_with_hooks 0
fi

if [ x$reason = xEXPIRE ] || [ x$reason = xFAIL ] || [ x$reason = xRELEASE ] \
   || [ x$reason = xSTOP ]; then
  if [ x$alias_ip_address != x ]; then
    # Turn off alias interface.
    ifconfig $interface:0- 0.0.0.0
  fi
  if [ x$old_ip_address != x ]; then
    # Shut down interface, which will delete routes and clear arp cache.
    ifconfig $interface 0.0.0.0 down
  fi
  if [ x$alias_ip_address != x ]; then
    ifconfig $interface:0 $alias_ip_address $alias_subnet_arg
    route add -host $alias_ip_address $interface:0
  fi
  exit_with_hooks 0
fi

if [ x$reason = xTIMEOUT ]; then
  if [ x$alias_ip_address != x ]; then
    ifconfig $interface:0- 0.0.0.0
  fi
  ifconfig $interface $new_ip_address $new_subnet_arg \
					$new_broadcast_arg
  set $new_routers
  if ping -q -c 1 $1; then
    if [ x$new_ip_address != x$alias_ip_address ] && \
			[ x$alias_ip_address != x ]; then
      ifconfig $interface:0 $alias_ip_address $alias_subnet_arg
      route add -host $alias_ip_address dev $interface:0
    fi
    for router in $new_routers; do
      if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
	route add -host $router dev $interface
      fi
      route add default gw $router
    done
    make_resolv_conf
    exit_with_hooks 0
  fi
  ifconfig $interface 0.0.0.0 down
  exit_with_hooks 1
fi

